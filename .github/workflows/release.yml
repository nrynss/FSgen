name: Build and Release

on:
  push:
    branches: [main]
    tags:
      - "v*"
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Test on all platforms to ensure everything works
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose

  # Build release binaries for all platforms
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: [test]
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: fsgen
            asset_name: fsgen-linux-x86_64

          # Linux aarch64 (ARM64)
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: fsgen
            asset_name: fsgen-linux-aarch64
            cross: true

          # Linux ARMv7
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            artifact_name: fsgen
            asset_name: fsgen-linux-armv7
            cross: true

          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: fsgen
            asset_name: fsgen-macos-x86_64

          # macOS ARM64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: fsgen
            asset_name: fsgen-macos-arm64

          # Windows x86_64 MSVC
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: fsgen.exe
            asset_name: fsgen-windows-x86_64.exe

          # Windows x86_64 GNU
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            artifact_name: fsgen.exe
            asset_name: fsgen-windows-gnu-x86_64.exe

          # Windows i686 (32-bit)
          - os: windows-latest
            target: i686-pc-windows-msvc
            artifact_name: fsgen.exe
            asset_name: fsgen-windows-i686.exe

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install cross-compilation tools
        if: matrix.cross
        run: |
          cargo install cross
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf

      - name: Build with cross
        if: matrix.cross
        run: |
          cross build --release --target ${{ matrix.target }}

      - name: Build standard
        if: "!matrix.cross"
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Package binary
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a ../../../${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
          else
            tar -czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          fi
          cd -

      - name: Upload binary to GitHub Release
        uses: svenstaro/upload-release-action@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ matrix.os == 'windows-latest' && format('{0}.zip', matrix.asset_name) || format('{0}.tar.gz', matrix.asset_name) }}
          asset_name: ${{ matrix.os == 'windows-latest' && format('{0}.zip', matrix.asset_name) || format('{0}.tar.gz', matrix.asset_name) }}
          tag: ${{ github.ref }}
          overwrite: true

  # Create a single release with all artifacts
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: |
            Release ${{ github.ref_name }}

            ## Binaries:

            ### Linux
            - [x86_64](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/fsgen-linux-x86_64.tar.gz)
            - [ARM64/aarch64](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/fsgen-linux-aarch64.tar.gz)
            - [ARMv7](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/fsgen-linux-armv7.tar.gz)

            ### macOS
            - [x86_64 (Intel)](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/fsgen-macos-x86_64.tar.gz)
            - [ARM64 (Apple Silicon)](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/fsgen-macos-arm64.tar.gz)

            ### Windows
            - [x86_64 (64-bit MSVC)](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/fsgen-windows-x86_64.exe.zip)
            - [x86_64 (64-bit GNU)](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/fsgen-windows-gnu-x86_64.exe.zip)
            - [i686 (32-bit)](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/fsgen-windows-i686.exe.zip)
